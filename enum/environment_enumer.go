// Code generated by "enumer -type=Environment -text -json -trimprefix Environment -transform=snake -output environment_enumer.go -comment app environment"; DO NOT EDIT.

// app environment
package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _EnvironmentName = "devprodstage"

var _EnvironmentIndex = [...]uint8{0, 3, 7, 12}

const _EnvironmentLowerName = "devprodstage"

func (i Environment) String() string {
	if i >= Environment(len(_EnvironmentIndex)-1) {
		return fmt.Sprintf("Environment(%d)", i)
	}
	return _EnvironmentName[_EnvironmentIndex[i]:_EnvironmentIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _EnvironmentNoOp() {
	var x [1]struct{}
	_ = x[EnvironmentDev-(0)]
	_ = x[EnvironmentProd-(1)]
	_ = x[EnvironmentStage-(2)]
}

var _EnvironmentValues = []Environment{EnvironmentDev, EnvironmentProd, EnvironmentStage}

var _EnvironmentNameToValueMap = map[string]Environment{
	_EnvironmentName[0:3]:       EnvironmentDev,
	_EnvironmentLowerName[0:3]:  EnvironmentDev,
	_EnvironmentName[3:7]:       EnvironmentProd,
	_EnvironmentLowerName[3:7]:  EnvironmentProd,
	_EnvironmentName[7:12]:      EnvironmentStage,
	_EnvironmentLowerName[7:12]: EnvironmentStage,
}

var _EnvironmentNames = []string{
	_EnvironmentName[0:3],
	_EnvironmentName[3:7],
	_EnvironmentName[7:12],
}

// EnvironmentString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EnvironmentString(s string) (Environment, error) {
	if val, ok := _EnvironmentNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _EnvironmentNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Environment values", s)
}

// EnvironmentValues returns all values of the enum
func EnvironmentValues() []Environment {
	return _EnvironmentValues
}

// EnvironmentStrings returns a slice of all String values of the enum
func EnvironmentStrings() []string {
	strs := make([]string, len(_EnvironmentNames))
	copy(strs, _EnvironmentNames)
	return strs
}

// IsAEnvironment returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Environment) IsAEnvironment() bool {
	for _, v := range _EnvironmentValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Environment
func (i Environment) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Environment
func (i *Environment) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Environment should be a string, got %s", data)
	}

	var err error
	*i, err = EnvironmentString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Environment
func (i Environment) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Environment
func (i *Environment) UnmarshalText(text []byte) error {
	var err error
	*i, err = EnvironmentString(string(text))
	return err
}
